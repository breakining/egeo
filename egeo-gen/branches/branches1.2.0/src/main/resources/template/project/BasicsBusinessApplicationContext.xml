<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>basicsBusinessApplicationContext</name>
	<filePath>basics-${projectName}/basics-${projectName}-business/src/main/resources/</filePath>
	<fileName>applicationContext.xml</fileName>
	<content><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd ">

	<!-- 自动扫描包 -->
	<context:component-scan base-package="com.egeo.basics.${projectName}.business" />
	<!-- dataSource -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:${global.config.path}/basics-${projectName}/basics-${projectName}-business/jdbc.write.properties</value>
				<value>file:${global.config.path}/basics-${projectName}/basics-${projectName}-business/jdbc.read.properties</value>
			</list>
		</property>
	</bean>
	<bean id="dataSourceWrite" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="true">
		<property name="driverClassName">
			<value>${jdbc.write.driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc.write.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.write.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.write.password}</value>
		</property>
		<property name="minIdle">
			<value>${jdbc.write.minIdle}</value>
		</property>
		<property name="initialSize">
			<value>${jdbc.write.initialSize}</value>
		</property>
		<property name="maxActive">
			<value>${jdbc.write.maxActive}</value>
		</property>
		<property name="maxIdle">
			<value>${jdbc.write.maxIdle}</value>
		</property>
		<property name="maxWait">
			<value>${jdbc.write.maxWait}</value>
		</property>
		<property name="defaultAutoCommit">
			<value>${jdbc.write.defaultAutoCommit}</value>
		</property>
		<property name="removeAbandonedTimeout">
			<value>${jdbc.write.removeAbandonedTimeout}</value>
		</property>
		<property name="testOnBorrow">
			<value>${jdbc.write.testOnBorrow}</value>
		</property>
		<property name="testOnReturn">
			<value>${jdbc.write.testOnReturn}</value>
		</property>
		<property name="validationQuery">
			<value>${jdbc.write.validationQuery}</value>
		</property>
		<property name="validationQueryTimeout">
			<value>${jdbc.write.validationQueryTimeout}</value>
		</property>
		<property name="testWhileIdle">
			<value>${jdbc.write.testWhileIdle}</value>
		</property>
	</bean>

	<!-- 写数据源配置 -->
	<bean id="dataSourceRead" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="true">
		<property name="driverClassName">
			<value>${jdbc.read.driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc.read.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.read.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.read.password}</value>
		</property>
		<property name="minIdle">
			<value>${jdbc.read.minIdle}</value>
		</property>
		<property name="initialSize">
			<value>${jdbc.read.initialSize}</value>
		</property>
		<property name="maxActive">
			<value>${jdbc.read.maxActive}</value>
		</property>
		<property name="maxIdle">
			<value>${jdbc.read.maxIdle}</value>
		</property>
		<property name="maxWait">
			<value>${jdbc.read.maxWait}</value>
		</property>
		<property name="defaultAutoCommit">
			<value>${jdbc.read.defaultAutoCommit}</value>
		</property>
		<property name="removeAbandonedTimeout">
			<value>${jdbc.read.removeAbandonedTimeout}</value>
		</property>
		<property name="testOnBorrow">
			<value>${jdbc.read.testOnBorrow}</value>
		</property>
		<property name="testOnReturn">
			<value>${jdbc.read.testOnReturn}</value>
		</property>
		<property name="validationQuery">
			<value>${jdbc.read.validationQuery}</value>
		</property>
		<property name="validationQueryTimeout">
			<value>${jdbc.read.validationQueryTimeout}</value>
		</property>
		<property name="testWhileIdle">
			<value>${jdbc.read.testWhileIdle}</value>
		</property>
	</bean>
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceWrite" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 方法后缀是WithTx加入事务 -->
			<tx:method name="*WithTx" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="myPointCut" expression="execution(* com.egeo.basics.${projectName}.business.write.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointCut" />
	</aop:config>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<bean id="sqlSessionFactoryRead" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceRead" />
		<property name="mapperLocations" value="classpath*:mappings/${projectName}/read/*SqlMap.xml" />
	</bean>
	<bean id="configRead" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.egeo.basics.${projectName}.dao.read" />
		<property name="sqlSessionFactory" ref="sqlSessionFactoryRead" />
	</bean>
	<bean id="sqlSessionFactoryWrite" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceWrite" />
		<property name="mapperLocations" value="classpath*:mappings/${projectName}/write/*SqlMap.xml" />
	</bean>
	<bean id="configWrite" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.egeo.basics.${projectName}.dao.write" />
		<property name="sqlSessionFactory" ref="sqlSessionFactoryWrite" />
	</bean>
</beans>
]]>
	</content>
</template>